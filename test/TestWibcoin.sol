pragma solidity ^0.4.15;

import "truffle/Assert.sol";
import "truffle/DeployedAddresses.sol";
import "../contracts/Wibcoin.sol";

contract TestWibcoin {

  Wibcoin deployedWibcoin;
  Wibcoin newWibcoin;

  function beforeEach() {
    deployedWibcoin = Wibcoin(DeployedAddresses.Wibcoin());
    newWibcoin = new Wibcoin();
  }

  // ERC20 functions
  // (https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md)
  //
  // - name() -> string
  // - symbol() -> string
  // - decimals() -> uint8
  // - totalSupply() -> uint
  // - balanceOf(address tokenOwner) -> uint
  // - transfer(address to, uint tokens) -> bool
  // - transferFrom(address from, address to, uint tokens) -> bool
  // - approve(address spender, uint tokens) -> bool
  // - allowance(address tokenOwner, address spender) -> uint

  function testDecimals() public {
    uint expected = 9;

    Assert.equal(deployedWibcoin.decimals(), expected, "Deployed Wibcoin should have 9 decimals.");
    Assert.equal(newWibcoin.decimals(), expected, "New Wibcoin should have 9 decimals.");
  }

  function testTotalSupply() public {
    uint256 expected = 9000000000;

    Assert.equal(deployedWibcoin.totalSupply(), expected, "Deployed Wibcoin total supply should be 9 billion WIB");
    Assert.equal(newWibcoin.totalSupply(), expected, "New Wibcoin total supply should be 9 billion WIB");
  }

  function testBalanceOf() public {
    uint256 expected = 9000000000;

    Assert.equal(deployedWibcoin.balanceOf(tx.origin), expected, "Deployed Wibcoin owner should have 9 billion WIB initially");
    Assert.equal(newWibcoin.balanceOf(tx.origin), expected, "New Wibcoin owner should have 9 billion WIB initially");
  }

  function testTransfer() public {
    address receiver = 0xe0F5206bcD039e7B1392e8918821224E2A7437B9; // TODO: Remove hardcoded account and use one generated by ganache-cli.
    bool expectedTransferReturn = true;
    uint expectedReceiverBalance = 42;

    Assert.equal(deployedWibcoin.transfer(receiver, expectedReceiverBalance), expectedTransferReturn, "Deployed Wibcoin should transfer WIB ");
    Assert.equal(newWibcoin.transfer(receiver, expectedReceiverBalance), expectedTransferReturn, "New Wibcoin should transfer WIB ");

    Assert.equal(deployedWibcoin.balanceOf(receiver), expectedReceiverBalance, "Deployed Wibcoin transaction receiver should receive WIB ");
    Assert.equal(newWibcoin.balanceOf(receiver), expectedReceiverBalance, "New Wibcoin transaction receiver should receive WIB ");
  }

  function testTransferFrom() public {
    address from = tx.origin;
    address receiver = 0xe0f5206bcd040e7B1392e8918821224e2A7437B9; // TODO: Remove hardcoded account and use one generated by ganache-cli.
    bool expectedTransferReturn = true;
    uint expectedReceiverBalance = 42;

    Assert.equal(deployedWibcoin.transferFrom(from, receiver, expectedReceiverBalance), expectedTransferReturn, "Deployed Wibcoin should transfer from another address ");
    Assert.equal(newWibcoin.transferFrom(from, receiver, expectedReceiverBalance), expectedTransferReturn, "New Wibcoin should transfer from another address ");

    Assert.equal(deployedWibcoin.balanceOf(receiver), expectedReceiverBalance, "Deployed Wibcoin transaction (from) receiver should receive WIB ");
    Assert.equal(newWibcoin.balanceOf(receiver), expectedReceiverBalance, "New Wibcoin transaction (from) receiver should receive WIB ");
  }

  function testApprove() public {
    address spender = 0xE0f5206bCd140E7B1392e8918821114e2A7437b9; // TODO: Remove hardcoded account and use one generated by ganache-cli.
    uint allowance = 100;

    bool expectedApproveReturn = true;

    Assert.equal(deployedWibcoin.approve(spender, allowance), expectedApproveReturn, "Deployed Wibcoin should approve a transaction ");
    Assert.equal(newWibcoin.approve(spender, allowance), expectedApproveReturn, "New Wibcoin should approve a transaction ");
  }

  function testAllowance() public {
    address owner = tx.origin;
    address spender = 0xE0f5206bCd140E7B1392e8918821114e2A7437b9; // TODO: Remove hardcoded account and use one generated by ganache-cli.
    uint expectedRemaining = 100;

    Assert.equal(deployedWibcoin.allowance(owner, spender), expectedRemaining, "Deployed Wibcoin should return remaining allowance");
    Assert.equal(newWibcoin.allowance(owner, spender), expectedRemaining, "New Wibcoin should return remaining allowance");
  }

  // Ownable functions
  // (https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/ownership/Ownable.sol)
  //
  // - transferOwnership(address newOwner) [onlyOwner]

  function testTransferOwnership() public {
  }

  // Destructible functions
  // (https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/lifecycle/Destructible.sol)
  //
  // - destroy() [onlyOwner]
  // - destroyAndSend(address recipient) [onlyOwner]

  function testDestroy() public {
    // TODO
  }

  function testDestroyAndSend() public {
    // TODO
  }

}
